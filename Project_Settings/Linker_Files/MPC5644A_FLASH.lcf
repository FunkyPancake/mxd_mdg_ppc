MEMORY
{
    /* First 16 KB for boot sector */
	bootloader_flash:	org = 0x00000000, len = 0x0000FFFF
	boot:	org = 0x00010000, len = 0x00000FFF
	/* Calibration data in 16KB blocks*/
	cal_flash:	org = 0x00014000, len = 0x00004000
	
	/* 512 KB of Flash memory available in single core configuration */
    iflash:        	   	   org = 0x00020000,   len = 0x003C0000 /* 2M & 786K */

    stby_ram:			   org = 0x40000000,   len = 0x00008000
    cal_ram:	           org = 0x40008000,   len = 0x00004000
    meas_ram:              org = 0x4000C000,   len = 0x00004000
    isram:          	   org = 0x4000F000,   len = 0x0001FF80

    /* Last 128 bytes to host bootloader input data */
    isram_bootloader_data: org = 0x4000FF80, len = 0x00000080
}

stby_sram_base = ADDR(stby_ram);
stby_sram_len = SIZEOF(stby_ram);
cal_sram_base = ADDR(cal_ram);
cal_rom_base = ADDR(cal_flash);
cal_sram_end = ADDR(cal_ram) +SIZEOF(cal_ram);
isram_base = ADDR(cal_ram);
isram_len = SIZEOF(isram);

SECTIONS
{
	GROUP : {
		.boot_data LOAD(ADDR(boot)): { KEEP(*(.boot_data)) }
		.boot LOAD(ADDR(.boot)): { }
	} > boot

	GROUP : {
		/*
		 * The following sections handle ee_start symbol placing (in both modes: VLE and BookE)
		 */
		ee_abs_saddr = .;
		.abs_vle.00080080 (VLECODE) LOAD(ee_abs_saddr): {}
		.abs.00080080 LOAD(ee_abs_saddr): {}
		ee_abs_eaddr = .;

        /* 
         * init section is located immediately after boot address
         * (within 4Kbytes required by MMU constraints at startup)
         */
        ee_init_saddr = .;
        .init LOAD(ee_abs_eaddr): {}
        .init_vle (VLECODE) LOAD(ee_abs_eaddr): {
            *(.init)
            *(.init_vle)
        }
        ee_init_eaddr = .;

		//.text_vle (VLECODE) LOAD(ADDR(iflash)+SIZEOF(APPL_descriptor_section)+SIZEOF(.abs_vle.00080080)): {
		.text_vle (VLECODE) LOAD(ee_init_eaddr): {
			*(.text)
			*(.text_vle)
			/**(.init)*/
			*(.fini)
			_etext_vle = . ;
		}
		.text LOAD(_etext_vle): {
			*(.text)
			*(.text_vle)
			/**(.init)*/
			*(.fini)
			*(.ctors)
			*(.dtors)
			*(extab)
			*(extabindex)
			*(.rdata)
			*(.rodata)
			_etext = . ;
		}

		.sdata2 LOAD(_etext): {
			*(.sdata2)
			*(.sbss2)
		 }

		. = ALIGN(16);
		ee_load_ram = . ;
	} > iflash

    .stby_ram NO_INIT_BSS :{
        *(.stby_32bit)
        *(.stby_16bit)
        *(.stby_8bit)
        *(.stby_unspecified)  
    } > stby_ram

    .cal_ram LOAD(ADDR(cal_flash)): {
        KEEP(*(.cal_32bit))
        KEEP(*(.cal_16bit))
        KEEP(*(.cal_8bit))
        KEEP(*(.cal_unspecified))        
    }   > cal_ram

    .fast_ram :{
        *(.fast_32bit)
        *(.fast_16bit)
        *(.fast_8bit)
        *(.fast_unspecified)   
    } > meas_ram   
	

	GROUP : {
		ee_sdata = . ;
		.data LOAD(ee_load_ram): { }

		.sram_text LOAD(ee_load_ram + ADDR(.sram_text) - ADDR(.data)): { }

		.sdata LOAD(ee_load_ram + ADDR(.sdata) - ADDR(.data)): { }

		ee_sbss = . ;
		.sbss : { }
		.bss : { }
		ee_ebss = . ;

		ee_sstack = . ;
		.stack LOAD(ADDR(.stack)): {
			*(.stack)
			*(.ustack)
		}
		ee_estack = . ;
	} > isram

}

